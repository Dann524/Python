# -*- coding: utf-8 -*-
"""Formulario colores magicos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16l976-_CU4ngONr0We8LhDol5Kv_qc3G
"""

#FORMULARIO DE PEDIDOS COLORES MÁGICOS

#Activacion de funciones con Google Drive
from google.colab import drive
drive.mount('/content/drive')

#Librerias
from PIL import Image, ImageDraw, ImageFont
import matplotlib.image as img
import matplotlib.pyplot as plot
import random
from tabulate import tabulate
from google.colab import output

#Declaracion de variables globales
global paquete1
global paquete2
global ban
paquete1 = [['1.- Caballetes',800,""],
            ['2.- Yesitos',700,""],
            ['3.- Pintacaritas',500,""],
            ['4.- Pintacaritas y Caballetes',1200,""],
            ['5.- Caballetes y Yesitos',1400,""],
            ['6.- Pintacaritas y Yesitos',1000,""]]

paquete2 = [['1.- Caballetes',950,""],
            ['2.- Yesitos',850,""],
            ['3.- Pintacaritas',650,""],
            ['4.- Pintacaritas y Caballetes',1500,""],
            ['5.- Caballetes y Yesitos',1600,""],
            ['6.- Pintacaritas y Yesitos', 1300,""]]
posicion = 0

#Directorio de la imagen (plantilla) en Google Drive
imagen = Image.open("/content/drive/MyDrive/imagenes/plantilla/Plantilla.png")
#Contexto de dibujo
dibujo = ImageDraw.Draw(imagen)
#Fuente de exto para el dibujo en Google Drive
fuente = ImageFont.truetype("/content/drive/MyDrive/Fuentes/Mermaid Babies.ttf",40)
fuente2 = ImageFont.truetype("/content/drive/MyDrive/Fuentes/Cascadia.ttf",30)

#***************************************************Funcion generadora de la imagen******************************************************
def TextoRight(texto,fuente,color):
  #Divide una cadena en una lista donde cada linea es un elemento de la lista
  lineas = texto.splitlines()
  #ancho y alto de la fuente
  anchofuente = fuente.getsize(max(lineas, key = lambda s: len(s)))[0]
  alturafuente = fuente.getsize(texto)[1] *len(lineas)

  #tamaño de la imagen en x,y
  x,y = imagen.size
  #print("x= " + str(x) + "\n" + "y= " + str(y))
  #Definimos la posicion del texto en la coordenadas y
  global posicion

  texto_x = 50
  texto_y = 360 + posicion
  #Establecemos los saltos de linea
  posicion = posicion + 60
  dibujo.text((texto_x,texto_y), texto, font=fuente,fill=color)

#Funcion para imprimir paquetes 1.-cerca o 2.-lejos de la sede central
def impresion(ser):
  if(ser=="1"):
    print(tabulate(paquete1))
  else:
    print(tabulate(paquete2))

#Funcion para verficar que los datos sean enteros o no
def verifEnt(ent):
  a = ent.isdigit()
  if(a == True):
    return 1
  else:
    print("Valor no válido, intente de nuevo por favor")
    return 0

#Función para convertir el texto de mes en su equivalente numérico
def mes(num):
  x = 0
  num = num.lower()
  anio = {"enero":1,"febrero":2,"marzo":3,"abril":4,"mayo":5,"junio":6,
          "julio":7,"agosto":8,"septiembre":9,"octubre":10,"noviembre":11,"diciembre":12,}
  anio2 = list(anio.keys())
  for i in range(0,len(anio2),1):
    if(anio2[i] in num):
      x = anio2[i]
  return(anio.get(x))

#Función para capitalizar textos
def Mayuscula(texto):
#Ciclo para eliminar espacios en blanco al final e inicio de las oraciones
  ban = 0
  while(ban == 0):
    if(texto[len(texto)-1]==" "):
      texto = texto[0:len(texto)-1]
    elif(texto[0] == " "):
      texto = texto[1:]
    else:
      ban = 1
  #Pasamos a mayuscula la primer letra
  texto = texto.capitalize()
  #Convertimos a lista el texto
  texto = list(texto)
  for i in range(0,len(texto),1):
    if(texto[i]==" "):
      texto[i+1] = texto[i+1].upper()
  texto = ''.join(texto)
  return texto

#Función de estilizado de espacios antes de crear la imagen
def espaciador(lista_aux):
  aux = []
  #obtenemos la cantidad de elementos (listas) dentro de la lista
  b = len(lista_aux)
  #Generamos una lista con la longitud de cada palabra del elemento 0 de cada sublista
  for i in range(0,b,1):
    a = len(lista_aux[i][0])
    aux.insert(i,a)
  #Determinamos la cadena de mayor longitud 
  mayor = aux[0]
  for i in range(0,b,1):
    if(aux[i]>mayor):
      mayor = aux[i]
  #Haremos que las cadenas tengan la misma longitud agregando espacios
  for i in range(0,b,1):
    #se calcula la diferencia de espacios entre el mayor y el elemento para aumentarlo por ciclos
    dif = mayor - len(lista_aux[i][0])
    esp = ""
    #Creamos una subcadena para agregar la cantidad correcta de espacios por elemento de sublista
    for j in range(0,dif,1):
      esp = esp + " "
    lista_aux[i][0] = lista_aux[i][0] + esp
  return(lista_aux)

#-------------------------------------------------------------SOLICITUD DE DATOS E INICIO DEL PROGRAMA
#-------------------------------------------------Peticion del nombre de cliente
nombre = input("Nombre del cliente: ")
nombre = Mayuscula(nombre)
#-------------------------------------------------Peticion de fecha del evento
fecha = input("Fecha del evento: ")
fecha = Mayuscula(fecha)
mes_num = mes(fecha)
#-------------------------------------------------Peticion de domicilio del evento
domicilio = input("Domicilio del evento: ")
domicilio = Mayuscula(domicilio)
#-------------------------------------------------Peticion del horario del evento
horario_inicio = input("Hora de inicio: ")
horario_fin = input("Hora de término: ")
horario = horario_inicio + " a " + horario_fin
#-------------------------------------------------Peticion del anticipo con proteccion
anticipo = input("Anticipo: ")
anticipo2 = float(anticipo)
#-------------------------------------------------Eleccion del area de servicio con proteccion
#Protecciones para area y eleccion de servicios
ban_seg = 0
while(ban_seg == 0):
  ban_seg=0
  serv = input("El servicio, en que área será?\n1.- Dentro del área\n2.- Fuera del área\n")
  a = serv.isdigit()
  if(a == False or int(serv)<1 or int(serv)>2):
    output.clear()
    print("Los datos ingresados no forman parte del menú, intente de nuevo por favor")
  else:
    impresion(serv)
    ban_seg = 1
#-------------------------------------------------Peticion de los servicios a contratar con proteccion
ban_seg = 0
while(ban_seg == 0):
  ban_seg=0
  servicios2 = input("\rIngrese en una linea separado por ',' los paquetes (1-6) que desea incluir: ")
  a = []
  j = 0
  for i in range(0,len(servicios2),1):
    b = servicios2[i].isdigit()
    if(b == True and int(servicios2[i])>0 and int(servicios2[i])<7):
      a.insert(j,servicios2[i])
      j = j + 1
  if(a == []):
    output.clear()
    print("No ingresaste valores aceptables, intenta de nuevo por favor")
    impresion(serv)
  else:
    ban_seg = 1

#Formacion de la lista de servicios y auxiliares para imprimir correctamente en imagen
servicios2 = list(servicios2)
servicios = []
pedido = []

#eliminamos las "," que incluyen por defecto las listas antes de formar la lista de pedido
for i in range(0,len(servicios2),1):
  if(servicios2[i]!=","):
    servicios.insert(i,int(servicios2[i]))

#formamos la lista del pedido ahora limpia a partir de la lista anidada de paquetes
for i in range(0,len(servicios),1):
  aux = servicios[i] - 1
  if(serv=="1"):
    pedido.insert(i,paquete1[aux])
  else:
    pedido.insert(i,paquete2[aux])

#ANÄLISIS DE las horas por servicio solicitado
hr = []
for i in range(0,len(pedido),1):
  a = float(input("Horas para " + pedido[i][0][4:] + ": "))
  pedido[i][1] = pedido[i][1] * a
  hr.insert(i,int(a))

#suma de las cantidades
subtotal = 0
for i in range(0,len(pedido),1):
  subtotal = float(subtotal + pedido[i][1])
total = subtotal - anticipo2

#correccion de textos (eliminamos los numeros que venian del menu de paquetes) y formacion del pedido
for i in range(0,len(pedido),1):
  pedido[i][0] = pedido[i][0][4:]
  pedido[i][2] = hr[i]

pedido.append(["Subtotal: ",subtotal])
pedido.append(["Anticipo: ",anticipo2])
pedido.append(["Total: ",total])

#correccion de textos y formacion del pedido
for i in range(0,len(pedido),1):
  pedido[i][1] = "$" + str(pedido[i][1])

cabecera = [["Concepto","Precio","Horas"]]
pedido = cabecera + pedido
#Cantidad de elementos del édido para ajustar los espacios en la imagen
lp = len(pedido)
pedido = tabulate(pedido)
print(pedido)
#-----------------------------------------------------------------Creacion del Folio
nombre2 = nombre.upper()
A = []
A.insert(0,nombre2[0])
#DETECCION DE LONGITUD DE NOMBRE
j = 1
for i in range(0,len(nombre2),1):
  if(nombre2[len(nombre2)-1]==" "):
    break
  if(nombre2[i] == " "):
    A.insert(j,nombre2[i+1])
    j = j + 1
j = len(A)
if(len(A)<4):
  for i in range(j,4,1):
    A.insert(i,"C")
A = ''.join(A)

folio = A[0] + A[1] + fecha[0:2] + str(mes_num) + fecha[-2:] + A[2] + str(random.randint(000,999)) + A[3]
#ESCRITURA DE DATOS EN IMAGEN
TextoRight("Nombre: " + nombre, fuente, "black")
TextoRight("Fecha: " + fecha,  fuente, "black")
TextoRight("Domicilio: " + domicilio,  fuente, "black")
TextoRight("Horario: " + horario,  fuente, "black")
posicion = posicion +20
TextoRight("             Descripción del pedido",fuente,"black")
#TextoRight(cabecera, fuente, "black")
TextoRight(pedido,  fuente2, "black")
posicion = posicion + 40 * lp
TextoRight("Folio: " + folio,  fuente, "black")

#uniremos dos cadenas para evitar repeticiones en el nombre
rutaimg = "/content/drive/MyDrive/imagenes/" + folio + ".png"

#Se almacena la imagen en Google Drive
imagen.save(rutaimg)

#Descarga de imagen al dispositivo
from google.colab import files
files.download(rutaimg)

mi_imagen = img.imread(rutaimg)
plot.imshow(mi_imagen)
plot.show()