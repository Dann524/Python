# -*- coding: utf-8 -*-
"""FicherosMB.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OcA7OJSKzQ_bY1yPfOZA5fGM89z7bcJt
"""

import requests
resultado=requests.get('https://www.ukulele-tabs.com/es/tablaturas/taylor-swift/all-too-well-10-minute-version-uke-tab-80547.txt')
info=resultado.text
print(info)

print(info)

#Carga de un archivo a Colab de forma local
from google.colab import files
carga=files.upload()
for fc in carga.keys():
  print('El usuario cargó el archivo "{name}" con longitud {length} bytes'.format(name=fc,length=len(carga[fc])))

#Carga de un archivo a Colab con diferentes nombres de variables
from google.colab import files
documento=files.upload()
for elemento in documento.keys():
  print('El usuario cargó el archivo "{nom_archivo}" con longitud {long_archivo} bytes'.format(nom_archivo=elemento,long_archivo=len(documento[elemento])))

from google.colab import drive
drive.mount ('/content/drive')

with open('/content/drive/My Drive/Nombres.txt', 'w') as f:
  f.write('Hello Google Drive!')
!cat /content/drive/My\ Drive/Nombres.txt

drive.flush_and_unmount()
print('All changes made in this colab session should now be visible in Drive.')

#4 campos de 13 personas
nombres=[]
edad=[]
pais=[]
colorfav=[]
for i in range (0,13,1):
  nom=input("Nombre: ")
  nombres.insert(i,nom)
  ed=input("Edad: ")
  edad.insert(i,ed)
  p=input("País de origen: ")
  pais.insert(i,p)
  col=input("Color favorito: ")
  colorfav.insert(i,col)
print(nombres)
print(edad)
print(pais)
print(colorfav)

from google.colab import files

with open('ejemplo.txt', 'w') as f:
  f.write('some content')

files.download('ejemplo.txt')

nombres=['Jesús','Julieta','Ricardo','Miranda','Miguel','Atala','Marcos','Alexandro','Misael','Ángel','Ariadna','Ramón','Javier']

from google.colab import files

with open('ejemplo5.txt', 'w') as f:
  for i in range (0,len(nombres),1):
    nom=nombres[i]+"\n"
    f.write(nom)

files.download('ejemplo5.txt')

nombre=['Jesús','Julieta','Ricardo','Miranda','Miguel','Atala','Marcos','Alexandro','Misael','Ángel','Ariadna','Ramón','Javier']
edad=['12', '4', '14', '10', '13', '11', '10', '13', '14', '9', '12', '10', '12']
pais=['México', 'México', 'Chile', 'Argentina', 'Ecuador', 'Venezuela', 'Perú', 'Chile', 'México', 'Bolivia', 'Perú', 'Chile', 'Venezuela']
colorfav=['Verde', 'Rosa', 'Rojo', 'Naranja', 'Morado', 'Rojo', 'Azul', 'Negro', 'Azul', 'Rojo', 'Rosa', 'Rosa', 'Azul']

from google.colab import files

with open('ejemplo6.txt','w') as f:
  for i in range (0,len(nombre),1):
    nom="Nombre: "+nombre[i]+", "+"Edad: "+edad[i]+", "+"País de origen: "+pais[i]+", "+"Color favorito: "+colorfav[i]+"\n"
    f.write(nom)

files.download('ejemplo6.txt')

#Nombre completo, edad, género. 4to campo es el Grupo determinado a partir de la edad. Niño fichero 1, Niña fichero 2
nombres=['Alexandro Díaz Domínguez','Misael Hurtado Gómez','Miguel Ángel Ruíz','Yoshly Karime Azrate','Mario Chavarría Castañeda','Elizabeth de la Cruz Santiago','Saúl Alfredo Puga Manjarrez','Erick Lee Guzman','Martín Ricardo Carbajal López','Julieta Iyali Sáchez Massé']
edad=['8','11','10','12','9','10','7','7','10','8']
genero=['Masculino','Masculino','Masculino','Femenino','Masculino','Femenino','Masculino','Masculino','Masculino','Femenino']
grado=[]

for i in range (0,len(edad),1):
  if edad[i]=='7':
    grado.insert(i,'1°')
  elif edad[i]=='8':
    grado.insert(i,'2°')
  elif edad[i]=='9':
    grado.insert(i,'3°')
  elif edad[i]=='10':
    grado.insert(i,'4°')
  elif edad[i]=='11':
    grado.insert(i,'5°')
  elif edad[i]=='12':
    grado.insert(i,'6°')
#print(grado)

from google.colab import files

with open('Niños de primaria.txt','w') as f:
  for i in range (0,len(genero),1):
    if genero[i]=='Masculino':
      nom1=nombres[i]+" "+edad[i]+" "+genero[i]+" "+grado[i]+"\n"
      f.write(nom1)

files.download('Niños de primaria.txt')

with open('Niñas de primaria.txt','w') as f:
  for i in range (0,len(genero),1):
    if genero[i]=='Femenino':
      nom2=nombres[i]+" "+edad[i]+" "+genero[i]+" "+grado[i]+"\n"
      f.write(nom2)

files.download('Niñas de primaria.txt')

nombres=[]
edad=[]
genero=[]
grado=[]
n=int(input("Escriba el número total de alumnos: "))
for i in range (0,n,1):
  nom=input("Nombre: ")
  nombres.insert(i,nom)
  ed=input("Edad: ")
  edad.insert(i,ed)
  ge=input("Genero: ")
  genero.insert(i,ge)

for i in range (0,n,1):
  if edad[i]=='7':
    grado.insert(i,'1°')
  elif edad[i]=='8':
    grado.insert(i,'2°')
  elif edad[i]=='9':
    grado.insert(i,'3°')
  elif edad[i]=='10':
    grado.insert(i,'4°')
  elif edad[i]=='11':
    grado.insert(i,'5°')
  elif edad[i]=='12':
    grado.insert(i,'6°')

from google.colab import files

with open('Niños de primaria.txt','w') as f:
  for i in range (0,len(genero),1):
    if genero[i]=='Masculino':
      nom1=nombres[i]+" "+edad[i]+" "+genero[i]+" "+grado[i]+"\n"
      f.write(nom1)

files.download('Niños de primaria.txt')

with open('Niñas de primaria.txt','w') as f:
  for i in range (0,len(genero),1):
    if genero[i]=='Femenino':
      nom2=nombres[i]+" "+edad[i]+" "+genero[i]+" "+grado[i]+"\n"
      f.write(nom2)

files.download('Niñas de primaria.txt')

#Diccionario con 50 elementos. Nombre del elemento = clave, símbolo = valor. A este se la va a asociar una lista, con la familia a la que pertenece el elemento.
#2 ficheros uno para claves y uno para valores
#Elementos que faltan: Yodo, Radón, Ástato, Francio, Radio, Hasio, Oganesón, Lutencio, Lawrencio
# I, Rn, At, Po, Fr, Ra, Hs, Og, Lu, Lr

elemen={'Hidrógeno':'H','Helio':'He','Litio':'Li','Berilio':'Be','Boro':'B','Carbono':'C','Nitrógeno':'N','Oxígeno':'O','Fluor':'F','Neón':'Ne',
        'Sodio':'Na','Magnesio':'Mg','Aluminio':'Al','Slilicio':'Si','Fósforo':'P','Azufre':'S','Cloro':'Cl','Argón':'Ar','Potasio':'K',
        'Calcio':'Ca','Escandio':'Sc','Titanio':'Ti','Vanadio':'V','Cromo':'Cr','Manganeso':'Mn','Hierro':'Fe','Cobalto':'Co','Niquel':'Ni',
        'Cobre':'Cu','Cinc':'Zn','Galio':'Ga','Germanio':'Ge','Arsénico':'As','Selenio':'Se','Bromo':'Br','Kriptón':'Kr','Rubidio':'Rb',
        'Estroncio':'Sr','Itrio':'Y','Circonio':'Zr','Niobio':'Nb','Molibdeno':'Mo','Tecnecio':'Tc','Rutenio':'Ru','Rodio':'Rh','Paladio':'Pd',
        'Plata':'Ag','Cadmio':'Cd','Indio':'In','Estaño':'Sn','Antimonio':'Sb','Telurio':'Te','Xenón':'Xe','Cesio':'Cs','Bario':'Ba','Hafnio':'Hf',
        'Tántalo':'Ta','Wolframio':'W','Renio':'Re','Osmio':'Os','Iridio':'Ir','Platino':'Pt','Oro':'Au','Mercurio':'Hg','Talio':'Tl','Plomo':'Pb',
        'Bismuto':'Bi','Rutherfordio':'Rf','Dubnio':'Db','Seaborgio':'Sg','Bohrio':'Bh','Meitnerio':'Mt','Darmstatio':'Ds','Roentgenio':'Rg',
        'Copernicio':'Cn','Nihonio':'Nh','Flerovio':'Fl','Moscovio':'Mc','Livermorio':'Lv','Teneso':'Ts','Lantano':'La','Cerio':'Ce',
        'Praseodimio':'Pr','Neodimio':'Nd','Prometio':'Pm','Samario':'Sm','Europio':'Eu','Gadolinio':'Gd','Terbio':'Tb','Disprosio':'Dy',
        'Holmio':'Ho','Erbio':'Er','Tulio':'Tm','Iterbio':'Yb','Actinio':'Ac','Torio':'Th','Protactinio':'Pa','Uranio':'U','Neptunio':'Np',
        'Plutonio':'Pu','Americio':'Am','Curio':'Cm','Berkelio':'Bk','Californio':'Cf','Einstenio':'Es','Fermio':'Fm','Mendelevio':'Md',
        'Nobelio':'No'}
alcalinos_c=[]
alcalinos_v=[]
alcalinoterreos_c=[]
alcalinoterreos_v=[]
mtransicion_c=[]
mtransicion_v=[]
mdelbloquep_c=[]
mdelbloquep_v=[]
semimetal_c=[]
semimetal_v=[]
nometales_c=[]
nometales_v=[]
gasesnobles_c=[]
gasesnobles_v=[]
na_c=[]
na_v=[]
lantanidos_c=[]
lantanidos_v=[]
actinidos_c=[]
actinidos_v=[]

list_symbol=list(elemen.values())
list_element=list(elemen.keys())
print("50 primeros elementos de la tabla periódica")
print(list_symbol)
print(list_element)
for i in range (0,len(elemen),1):
  if (list_symbol[i]=='H' or list_symbol[i]=='C' or list_symbol[i]=='N' or list_symbol[i]=='O' or list_symbol[i]=='F' or list_symbol[i]=='P' or list_symbol[i]=='S' 
      or list_symbol[i]=='Cl' or list_symbol[i]=='Se' or list_symbol[i]=='Br' or list_symbol[i]=='I'):
    nometales_c.insert(i,list_element[i])
    nometales_v.insert(i,list_symbol[i])
  if (list_symbol[i]=='Be' or list_symbol[i]=='Mg' or list_symbol[i]=='Ca' or list_symbol[i]=='Sr' or list_symbol[i]=='Ba' or list_symbol[i]=='Ra'):
    alcalinoterreos_c.insert(i,list_element[i])
    alcalinoterreos_v.insert(i,list_symbol[i])
  if (list_symbol[i]=='Li' or list_symbol[i]=='Na' or list_symbol[i]=='K' or list_symbol[i]=='Rb' or list_symbol[i]=='Cs' or list_symbol[i]=='Fr'):
    alcalinos_c.insert(i,list_element[i])
    alcalinos_v.insert(i,list_symbol[i])
  if (list_symbol[i]=='B' or list_symbol[i]=='Si' or list_symbol[i]=='Ge' or list_symbol[i]=='As' or list_symbol[i]=='Sb' or list_symbol[i]=='Te' or list_symbol[i]=='At'):
    semimetal_c.insert(i,list_element[i])
    semimetal_v.insert(i,list_symbol[i])
  if (list_symbol[i]=='Sc' or list_symbol[i]=='Ti' or list_symbol[i]=='V' or list_symbol[i]=='Cr' or list_symbol[i]=='Mn' or list_symbol[i]=='Fe' or list_symbol[i]=='Co' 
      or list_symbol[i]=='Ni' or list_symbol[i]=='Cu' or list_symbol[i]=='Zn' or list_symbol[i]=='Y' or list_symbol[i]=='Zr' or list_symbol[i]=='Nb' or list_symbol[i]=='Mo' 
      or list_symbol[i]=='Tc' or list_symbol[i]=='Ru' or list_symbol[i]=='Rh' or list_symbol[i]=='Pd' or list_symbol[i]=='Ag' or list_symbol[i]=='Cd' or list_symbol[i]=='Hf'
      or list_symbol[i]=='Ta' or list_symbol[i]=='W' or list_symbol[i]=='Re' or list_symbol[i]=='Os' or list_symbol[i]=='Ir' or list_symbol[i]=='Pt' or list_symbol[i]=='Au'
      or list_symbol[i]=='Hg' or list_symbol[i]=='Rf' or list_symbol[i]=='Db' or list_symbol[i]=='Sq' or list_symbol[i]=='Bh' or list_symbol[i]=='Hs'):
    mtransicion_c.insert(i,list_element[i])
    mtransicion_v.insert(i,list_symbol[i])
  if (list_symbol[i]=='Al' or list_symbol[i]=='Ga' or list_symbol[i]=='In' or list_symbol[i]=='Sn' or list_symbol[i]=='Tl' or list_symbol[i]=='Pb' or list_symbol[i]=='Bi' or list_symbol[i]=='Po'):
    mdelbloquep_c.insert(i,list_element[i])
    mdelbloquep_v.insert(i,list_symbol[i])
  if (list_symbol[i]=='He' or list_symbol[i]=='Ne' or list_symbol[i]=='Ar' or list_symbol[i]=='Kr' or list_symbol[i]=='Xe' or list_symbol[i]=='Rn'):
    gasesnobles_c.insert(i,list_element[i])
    gasesnobles_v.insert(i,list_symbol[i])
  if (list_symbol[i]=='Mt' or list_symbol[i]=='Ds' or list_symbol[i]=='Rg' or list_symbol[i]=='Cn' or list_symbol[i]=='Nh' or list_symbol[i]=='Fl' or list_symbol[i]=='Mc'
    or list_symbol[i]=='Lv' or list_symbol[i]=='Ts' or list_symbol[i]=='Og'):
    na_c.insert(i,list_element[i])
    na_v.insert(i,list_symbol[i])
  if (list_symbol[i]=='La' or list_symbol[i]=='Ce' or list_symbol[i]=='Pr' or list_symbol[i]=='Nd' or list_symbol[i]=='Pm' or list_symbol[i]=='Sm' or list_symbol[i]=='Eu'
    or list_symbol[i]=='Gd' or list_symbol[i]=='Tb' or list_symbol[i]=='Dy' or list_symbol[i]=='Ho' or list_symbol[i]=='Er' or list_symbol[i]=='Tm' or list_symbol[i]=='Yb'
    or list_symbol[i]=='Lu'):
    lantanidos_c.insert(i,list_element[i])
    lantanidos_v.insert(i,list_symbol[i])
  if (list_symbol[i]=='Ac' or list_symbol[i]=='Th' or list_symbol[i]=='Pa' or list_symbol[i]=='U' or list_symbol[i]=='Np' or list_symbol[i]=='Pu' or list_symbol[i]=='Am'
    or list_symbol[i]=='Cm' or list_symbol[i]=='Bk' or list_symbol[i]=='Cf' or list_symbol[i]=='Es' or list_symbol[i]=='Fm' or list_symbol[i]=='Md' or list_symbol[i]=='No'
    or list_symbol[i]=='Lr'):
    actinidos_c.insert(i,list_element[i])
    actinidos_v.insert(i,list_symbol[i])
print("\nNo Metales")
print(nometales_c)
print(nometales_v)
print("\nAlcalinotérreos")
print(alcalinoterreos_c)
print(alcalinoterreos_v)
print("\nAlcalinos")
print(alcalinos_c)
print(alcalinos_v)
print("\nSemimetales")
print(semimetal_c)
print(semimetal_v)
print("\nMetales de transición")
print(mtransicion_c)
print(mtransicion_v)
print("\nMetales del bloque p")
print(mdelbloquep_c)
print(mdelbloquep_v)
print("\nGases nobles")
print(gasesnobles_c)
print(gasesnobles_v)
print("\nN/A")
print(na_c)
print(na_v)
print("\nLantánidos")
print(lantanidos_c)
print(lantanidos_v)
print("\nActínidos")
print(actinidos_c)
print(actinidos_v)

element1=input("Escriba el símbolo del elemento faltante de la familia de los No Metales: ")
element2=input("Escriba el símbolo del elemento faltante de la familia de los Alcalinotérreos: ")
element3=input("Escriba el símbolo del elemento faltante de la familia de los Alcalinos: ")
element4=input("Escriba el símbolo del elemento faltante de la familia de los Semimetales: ")
element5=input("Escriba el símbolo del elemento faltante de la familia de los Metales de transición: ")
element6=input("Escriba el símbolo del elemento faltante de la familia de los Metales del bloque p: ")
element7=input("Escriba el símbolo del elemento faltante de la familia de los Gases nobles: ")
element8=input("Escriba el símbolo del elemento faltante de la familia de los N/A: ")
element9=input("Escriba el símbolo del elemento faltante de la familia de los Lantánidos: ")
element10=input("Escriba el símbolo del elemento faltante de la familia de los Actinidos: ")

nometales_c.insert(len(nometales_c)+1,"Yodo")
nometales_v.insert(len(nometales_v)+1,element1)
alcalinoterreos_c.insert(len(alcalinoterreos_c)+1,"Radio")
alcalinoterreos_v.insert(len(alcalinoterreos_v)+1,element2)
alcalinos_c.insert(len(alcalinos_c)+1,"Francio")
alcalinos_v.insert(len(alcalinos_v)+1,element3)
semimetal_c.insert(len(semimetal_c)+1,"Ástato")
semimetal_v.insert(len(semimetal_v)+1,element4)
mtransicion_c.insert(len(mtransicion_c)+1,"Hasio")
mtransicion_v.insert(len(mtransicion_v)+1,element5)
mdelbloquep_c.insert(len(mdelbloquep_c)+1,"Polonio")
mdelbloquep_v.insert(len(mdelbloquep_v)+1,element6)
gasesnobles_c.insert(len(gasesnobles_c)+1,"Radón")
gasesnobles_v.insert(len(gasesnobles_v)+1,element7)
na_c.insert(len(na_c)+1,"Oganesón")
na_v.insert(len(na_v)+1,element8)
lantanidos_c.insert(len(lantanidos_c)+1,"Lutecio")
lantanidos_v.insert(len(lantanidos_v)+1,element9)
actinidos_c.insert(len(actinidos_c)+1,"Lawrencio")
actinidos_v.insert(len(actinidos_v)+1,element10)

from google.colab import files
with open('Nombres tabla periódica.txt','w') as f:
  for i in range (0,len(nometales_c),1):
    nome=nometales_c[i]+", "
    if (i==len(nometales_c)-1):
      nome=nometales_c[i]+"\n"
    f.write(nome)
  for i in range (0,len(alcalinoterreos_c),1):
    alct=alcalinoterreos_c[i]+", "
    if (i==len(alcalinoterreos_c)-1):
      alct=alcalinoterreos_c[i]+"\n"
    f.write(alct)
  for i in range (0,len(alcalinos_c),1):
    alc=alcalinos_c[i]+", "
    if (i==len(alcalinos_c)-1):
      alc=alcalinos_c[i]+"\n"
    f.write(alc)
  for i in range (0,len(semimetal_c),1):
    semi=semimetal_c[i]+", "
    if (i==len(semimetal_c)-1):
      semi=semimetal_c[i]+"\n"
    f.write(semi)
  for i in range (0,len(mtransicion_c),1):
    mtr=mtransicion_c[i]+", "
    if (i==len(mtransicion_c)-1):
      mtr=mtransicion_c[i]+"\n"
    f.write(mtr)
  for i in range (0,len(mdelbloquep_c),1):
    mbp=mdelbloquep_c[i]+", "
    if (i==len(mdelbloquep_c)-1):
      mbp=mdelbloquep_c[i]+"\n"
    f.write(mbp)
  for i in range (0,len(gasesnobles_c),1):
    gasn=gasesnobles_c[i]+", "
    if (i==len(gasesnobles_c)-1):
      gasn=gasesnobles_c[i]+"\n"
    f.write(gasn)
  for i in range (0,len(na_c),1):
    nan=na_c[i]+", "
    if (i==len(na_c)-1):
      nan=na_c[i]+"\n"
    f.write(nan)
  for i in range (0,len(lantanidos_c),1):
    lan=lantanidos_c[i]+", "
    if (i==len(lantanidos_c)-1):
      lan=lantanidos_c[i]+"\n"
    f.write(lan)
  for i in range (0,len(actinidos_c),1):
    act=actinidos_c[i]+", "
    if (i==len(actinidos_c)-1):
      act=actinidos_c[i]+"\n"
    f.write(act)
files.download('Nombres tabla periódica.txt')

with open('Símbolos tabla periódica.txt','w') as f:
  for i in range (0,len(nometales_v),1):
    nome=nometales_v[i]+", "
    if (i==len(nometales_v)-1):
      nome=nometales_v[i]+"\n"
    f.write(nome)
  for i in range (0,len(alcalinoterreos_v),1):
    alct=alcalinoterreos_v[i]+", "
    if (i==len(alcalinoterreos_v)-1):
      alct=alcalinoterreos_v[i]+"\n"
    f.write(alct)
  for i in range (0,len(alcalinos_v),1):
    alc=alcalinos_v[i]+", "
    if (i==len(alcalinos_v)-1):
      alc=alcalinos_v[i]+"\n"
    f.write(alc)
  for i in range (0,len(semimetal_v),1):
    semi=semimetal_v[i]+", "
    if (i==len(semimetal_v)-1):
      semi=semimetal_v[i]+"\n"
    f.write(semi)
  for i in range (0,len(mtransicion_v),1):
    mtr=mtransicion_v[i]+", "
    if (i==len(mtransicion_v)-1):
      mtr=mtransicion_v[i]+"\n"
    f.write(mtr)
  for i in range (0,len(mdelbloquep_v),1):
    mbp=mdelbloquep_v[i]+", "
    if (i==len(mdelbloquep_v)-1):
      mbp=mdelbloquep_v[i]+"\n"
    f.write(mbp)
  for i in range (0,len(gasesnobles_v),1):
    gasn=gasesnobles_v[i]+", "
    if (i==len(gasesnobles_v)-1):
      gasn=gasesnobles_v[i]+"\n"
    f.write(gasn)
  for i in range (0,len(na_v),1):
    nan=na_v[i]+", "
    if (i==len(na_v)-1):
      nan=na_v[i]+"\n"
    f.write(nan)
  for i in range (0,len(lantanidos_v),1):
    lan=lantanidos_v[i]+", "
    if (i==len(lantanidos_v)-1):
      lan=lantanidos_v[i]+"\n"
    f.write(lan)
  for i in range (0,len(actinidos_v),1):
    act=actinidos_v[i]+", "
    if (i==len(actinidos_v)-1):
      act=actinidos_v[i]+"\n"
    f.write(act)
files.download('Símbolos tabla periódica.txt')

contenido=open('/content/Símbolos tabla periódica.txt','r')
conta=0
for linea in contenido:
  conta=conta+1
  print(linea)
print("Mi archivo tiene ",conta," líneas")
contenido.close()

contenido=open('/content/Símbolos tabla periódica.txt','r')
conta=0
for linea in contenido:
  conta=conta+1
  print("Familia ",conta,"\bA")
  print(linea)
print("Mi archivo tiene ",conta," líneas")
contenido.close()

contenido=open('/content/Símbolos tabla periódica.txt','a')
contenido.writelines("I")
contenido.close()

#Dict1 de carnes, Dict2 de frutas y vegetales, Dict3 de cereales y leguminosas y Dict4 de supmentos alimenticios 100g
carnes={'res':'30','cerdo':'25','pollo':'50','conejo':'35','oveja':'40','cabra':'25','salmón':'70','atún':'62','camarón':'65','pulpo':'58'}
frutas={'fresa':'27','mango':'28','kiwi':'30','frambuesa':'19','cereza':'16','zanahoria':'15','chayote':'8','papa':'9','brócoli':'7','lechuga':'4'}
cereales={'arroz':'25','avena':'26','centeno':'24','cebada':'26','maíz':'13','sorgo':'14','trigo':'16','cacahuate':'39','lentejas':'40','frijoles':'43'}
suplementos={'magnesio':'19','vitamina c':'20','calcio':'27','ginseng':'28','vitamina d':'36','cúrcuma':'8','cafeína':'4','té verde':'6','echinacea':'7','espirulina':'8'}
#Estilo de vida, género, peso.
#4 estilos de vida: 1.-Sedentario (0.8), 2.-Ejercicio 2- (1), 3.-Ejer 3-5 (1.6), 4.-Ejer max (2.1). Resultado en gramos. peso*(). Entre 80 y 96.
print("Favor de llenar los siguientes campos con su información:")
Es=int(input("Estilo de vida: 1.-Sedentario. 2.-Ejercicio 2 veces o menos por semana. 3.-Ejercicio 3 a 5 veces por semana. 4.-Ejercicio de alto rendimiento. :"))
gen=input("Género: ")
peso=float(input("Peso: "))

if (Es==1):
  proteina_necesaria=peso*(0.8)
elif (Es==2):
  proteina_necesaria=peso*(1)
elif (Es==3):
  proteina_necesaria=peso*(1.6)
elif (Es==4):
  proteina_necesaria=peso*(2.1)
else:
  print("Error, opción invalida.")

print("Se requiere una dieta con ",proteina_necesaria,'g de proteína.')
print("Su dieta contiene los siguientes alimentos: ")
import random
a=0

while (a==0):
  clave1,valor1=random.choice(list(carnes.items()))
  valor1=int(valor1)

  clave2,valor2=random.choice(list(frutas.items()))
  valor2=int(valor2)
  
  clave3,valor3=random.choice(list(cereales.items()))
  valor3=int(valor3)
  
  clave4,valor4=random.choice(list(suplementos.items()))
  valor4=int(valor4)
  
  if (valor1+valor2+valor3+valor4>=proteina_necesaria and valor1+valor2+valor3+valor4<=proteina_necesaria+40):
    a=1
print(clave1)
print(valor1)
print(clave2)
print(valor2)
print(clave3)
print(valor3)
print(clave4)
print(valor4)

print("La dieta recomendada contiene ",valor1+valor2+valor3+valor4,"g de proteína")

from google.colab import files

with open('Dieta.txt','w') as f:
  d1="DIETA \nSe requiere una dieta con "+str(proteina_necesaria)+"g de proteína.\nSu dieta contiene los siguientes alimentos:\n\n"
  f.write(d1)
  d2=clave1+"\n"+str(valor1)+"g\n\n"+clave2+"\n"+str(valor2)+"g\n\n"+clave3+"\n"+str(valor3)+"g\n\n"+clave4+"\n"+str(valor4)+"g\n\n"
  f.write(d2)
  d3="La dieta recomendada contiene "+str(valor1+valor2+valor3+valor4)+"g de proteína"
  f.write(d3)

files.download('Dieta.txt')

#3 txt. Nacionalidades, 15 razas de perros, 15 razas de gatos.
contenido1=open('/content/Nacionalidades.txt','r')
contenido2=open('/content/perros.txt','r')
contenido3=open('/content/gatos.txt','r')
na=[]
pe=[]
ga=[]
conta=0
for linea in contenido1:
  conta=conta+1
  if (conta==14):
    na.insert(conta,linea)
  else:
    na.insert(conta,linea[:-1])
contenido1.close()

for linea in contenido2:
  conta=conta+1
  if (conta==14):
    pe.insert(conta,linea)
  else:
    pe.insert(conta,linea[:-1])
contenido2.close()

for linea in contenido3:
  conta=conta+1
  if (conta==14):
    ga.insert(conta,linea)
  else:
    ga.insert(conta,linea[:-1])
contenido3.close()

print(na)
print(pe)
print(ga)

print("\n")
import random
a=0
while (a==0):
  nr1=random.choice(na)
  nr2=random.choice(na)
  nr3=random.choice(na)
  nr4=random.choice(na)
  nr5=random.choice(na)
  if (nr1==nr2 or nr1==nr3 or nr1==nr4 or nr1==nr5 or nr2==nr3 or nr2==nr4 or nr2==nr5 or nr5==nr3 or nr3==nr4 or nr4==nr5):
    a=0
  else:
    a=1
print("N1: ",nr1) #3
print("N2: ",nr2) #2
print("N3: ",nr3) #2
print("N4: ",nr4) #2
print("N5: ",nr5) #1

print("\n")
a=0
while (a==0):
  pr1=random.choice(pe)
  pr2=random.choice(pe)
  pr3=random.choice(pe)
  pr4=random.choice(pe)
  pr5=random.choice(pe)
  if (pr1==pr2 or pr1==pr3 or pr1==pr4 or pr1==pr5 or pr2==pr3 or pr2==pr4 or pr2==pr5 or pr5==pr3 or pr3==pr4 or pr4==pr5):
    a=0
  else:
    a=1
print("P1: ",pr1) #3
print("P2: ",pr2) #2
print("P3: ",pr3) #2
print("P4: ",pr4) #2
print("P5: ",pr5) #1

print("\n")
a=0
while (a==0):
  gr1=random.choice(ga)
  gr2=random.choice(ga)
  gr3=random.choice(ga)
  gr4=random.choice(ga)
  gr5=random.choice(ga)
  if (gr1==gr2 or gr1==gr3 or gr1==gr4 or gr1==gr5 or gr2==gr3 or gr2==gr4 or gr2==gr5 or gr5==gr3 or gr3==gr4 or gr4==gr5):
    a=0
  else:
    a=1
print("G1: ",gr1) #3
print("G2: ",gr2) #2
print("G3: ",gr3) #2
print("G4: ",gr4) #2
print("G5: ",gr5) #1

#3 txt. Nacionalidades, 15 razas de perros, 15 razas de gatos.
contenido1=open('/content/Nacionalidades.txt','r')
contenido2=open('/content/perros.txt','r')
contenido3=open('/content/gatos.txt','r')
dina={'mexicano':10, 'colombiano':20, 'turco':30, 'argentino':40, 'ruso':50, 'brasileño':60, 'peruano':70, 'español':80, 'francés':90, 'sueco':100, 'neozelandés':110, 'koreano':120, 'húngaro':130, 'libanés':140}
dipe={'mastín italiano':10, 'chihuahua':20, 'teckel':30, 'appenzeller':40, 'rottweiler':50, 'bulldog':60, 'pastor alemán':70, 'esquimal americano':80, 'fila brasileño':90, 'spaniel bretón':100, 'northern inuit':110, 'keeshond':120, 'husky siberiano':130, 'labrado':140}
diga={'maine coon':10, 'cornish rex':20, 'toyger':30, 'american wirehair':40, 'ragdoll':50, 'british shorthair':60, 'peterbald':70, 'esfinge':80, 'fold escocés':90, 'siamés':100, 'nebelung':110, 'korat':120, 'himalayo':130, 'laper':140}
na=[]
pe=[]
ga=[]
conta=0
for linea in contenido1:
  conta=conta+1
  if (conta==14):
    na.insert(conta,linea)
  else:
    na.insert(conta,linea[:-1])
contenido1.close()

for linea in contenido2:
  conta=conta+1
  if (conta==14):
    pe.insert(conta,linea)
  else:
    pe.insert(conta,linea[:-1])
contenido2.close()

for linea in contenido3:
  conta=conta+1
  if (conta==14):
    ga.insert(conta,linea)
  else:
    ga.insert(conta,linea[:-1])
contenido3.close()

print(na)
print(pe)
print(ga)

print("\n")
import random
nr1=random.choice(na)
nr2=random.choice(na)
nr3=random.choice(na)

#nr1='libanés'
#nr2='libanés'
#nr3='libanés'
  
print("N1: ",nr1)
print("N2: ",nr2)
print("N3: ",nr3)

if (nr1==nr2 and nr2==nr3):
  print("Felicidades. ¡Ha ganado un premio!")
  for clave in dina.keys():
    if (clave==nr1):
      print("Su premio es de ",dina[clave]," fichas.")
elif (nr1==nr2 or nr2==nr3 or nr1==nr3):
  print("Estuvo cerca, inténtalo otra vez.")
else:
  print("Perdiste")

print("\n")

pr1=random.choice(pe)
pr2=random.choice(pe)
pr3=random.choice(pe)

#pr1='mastín italiano'
#pr2='mastín italiano'
#pr3='mastín italiano'

print("P1: ",pr1)
print("P2: ",pr2)
print("P3: ",pr3)

if (pr1==pr2 and pr2==pr3):
  print("Felicidades. ¡Ha ganado un premio!")
  for clave in dipe.keys():
    if (clave==pr1):
      print("Su premio es de ",dipe[clave]," fichas.")
elif (pr1==pr2 or pr2==pr3 or pr1==pr3):
  print("Estuvo cerca, inténtalo otra vez.")
else:
  print("Perdiste")

print("\n")

gr1=random.choice(ga)
gr2=random.choice(ga)
gr3=random.choice(ga)

print("G1: ",gr1)
print("G2: ",gr2)
print("G3: ",gr3)

if (gr1==gr2 and gr2==gr3):
  print("Felicidades. ¡Ha ganado un premio!")
  for clave in diga.keys():
    if (clave==gr1):
      print("Su premio es de ",diga[clave]," fichas.")
elif (gr1==gr2 or gr2==gr3 or gr1==gr3):
  print("Estuvo cerca, inténtalo otra vez.")
else:
  print("Perdiste")

from google.colab import files
documento=files.upload()
for elemento in documento.keys():
  print('El usuario cargó el archivo "{nom_archivo}" con longitud {long_archivo} bytes'.format(nom_archivo=elemento,long_archivo=len(documento[elemento])))

len=0
borrar=input("¿Qué elemento desea eliminar de su txt? ")
with open('gatos2.txt', 'w') as f:
  for i in range (0,len(lista),1):
    len=len+1
f.close()
lista=['a' for i in range(len)]

with open('gatos2.txt', 'w') as f:
  for i in range (0,len(lista),1):
    f.write(i)

f.close()

files.download('ejemplo5.txt')

#Crear 10 listas de productos de cocacola, cada lista es un producto de cocacola.
#Cada lista contiene lo siguiente: Nombre del producto, código de barras, cantidad de calorías, cantidad de azúcar, fecha de caducidad e inventario.
#recibe fecha actual. Si el producto ya caducó, nos vamos a verificar el código de barras, donde el código de barras etará compuesto por 7 dígitos. Si el dígito es 0 el poducto es apto para reemezclado. si está entre el 1 y el 4, debe ser reprocesado, si está del 5 al 7 debe ser ofertado, si está en el número 8 se utiliza para pruebas químicas y si está en el número 9 es deshechado.
#En caso de que las calorías excedan los 100g se coloca una etiqueta de exceso de calorías, similar con el azucar (25g).

contenido1=open('/content/Refrescos.txt','r')
na=[]
conta=0
for linea in contenido1:
  conta=conta+1
  if (conta==60):
    na.insert(conta,linea)
  else:
    na.insert(conta,linea[:-1])
contenido1.close()

ref1=na[:6]
ref2=na[6:12]
ref3=na[12:18]
ref4=na[18:24]
ref5=na[24:30]
ref6=na[30:36]
ref7=na[36:42]
ref8=na[42:48]
ref9=na[48:54]
ref10=na[54:60]

print(ref1)
print(ref2)
print(ref3)
print(ref4)
print(ref5)
print(ref6)
print(ref7)
print(ref8)
print(ref9)
print(ref10)
print("\n")

fecha=int(input("Escriba la fecha actual: "))

print("\n Refresco 1")
if (fecha>int(ref1[1])):
  print("El producto ha caducado.")
  num=ref1[1]
  print("Código de barras: ",num)
  if (int(num[6])==0):
    print("El producto es apto para reemplazo.")
  elif (int(num[6])>=1 and int(num[6])<=4):
    print("El producto debe ser reprocesado.")
  elif (int(num[6])>=5 and int(num[6])<=7):
    print("El producto debe ser ofertado.")
  elif (int(num[6])==8):
    print("El producto debe ser utilizado en pruebas químicas.")
  elif (int(num[6])==9):
    print("El producto debe ser deshechado.")
else:
  print("El producto aún no ha caducado.")
print("Calorías= ",int(ref1[2]))
print("Azúcares= ",int(ref1[3]))
if (int(ref1[2])>100):
  print("Etiqueta de exceso de calorías.")
if (int(ref1[3])>25):
  print("Etiqueta de exceso de azúcares.")

print("\n Refresco 2")
if (fecha>int(ref2[1])):
  print("El producto ha caducado.")
  num=ref2[1]
  print("Código de barras: ",num)
  if (int(num[6])==0):
    print("El producto es apto para reemplazo.")
  elif (int(num[6])>=1 and int(num[6])<=4):
    print("El producto debe ser reprocesado.")
  elif (int(num[6])>=5 and int(num[6])<=7):
    print("El producto debe ser ofertado.")
  elif (int(num[6])==8):
    print("El producto debe ser utilizado en pruebas químicas.")
  elif (int(num[6])==9):
    print("El producto debe ser deshechado.")
else:
  print("El producto aún no ha caducado.")
print("Calorías= ",int(ref2[2]))
print("Azúcares= ",int(ref2[3]))
if (int(ref2[2])>100):
  print("Etiqueta de exceso de calorías.")
if (int(ref2[3])>25):
  print("Etiqueta de exceso de azúcares.")

print("\n Refresco 3")
if (fecha>int(ref3[1])):
  print("El producto ha caducado.")
  num=ref3[1]
  print("Código de barras: ",num)
  if (int(num[6])==0):
    print("El producto es apto para reemplazo.")
  elif (int(num[6])>=1 and int(num[6])<=4):
    print("El producto debe ser reprocesado.")
  elif (int(num[6])>=5 and int(num[6])<=7):
    print("El producto debe ser ofertado.")
  elif (int(num[6])==8):
    print("El producto debe ser utilizado en pruebas químicas.")
  elif (int(num[6])==9):
    print("El producto debe ser deshechado.")
else:
  print("El producto aún no ha caducado.")
print("Calorías= ",int(ref3[2]))
print("Azúcares= ",int(ref3[3]))
if (int(ref3[2])>100):
  print("Etiqueta de exceso de calorías.")
if (int(ref3[3])>25):
  print("Etiqueta de exceso de azúcares.")

print("\n Refresco 4")
if (fecha>int(ref4[1])):
  print("El producto ha caducado.")
  num=ref4[1]
  print("Código de barras: ",num)
  if (int(num[6])==0):
    print("El producto es apto para reemplazo.")
  elif (int(num[6])>=1 and int(num[6])<=4):
    print("El producto debe ser reprocesado.")
  elif (int(num[6])>=5 and int(num[6])<=7):
    print("El producto debe ser ofertado.")
  elif (int(num[6])==8):
    print("El producto debe ser utilizado en pruebas químicas.")
  elif (int(num[6])==9):
    print("El producto debe ser deshechado.")
else:
  print("El producto aún no ha caducado.")
print("Calorías= ",int(ref4[2]))
print("Azúcares= ",int(ref4[3]))
if (int(ref4[2])>100):
  print("Etiqueta de exceso de calorías.")
if (int(ref4[3])>25):
  print("Etiqueta de exceso de azúcares.")

print("\n Refresco 5")
if (fecha>int(ref5[1])):
  print("El producto ha caducado.")
  num=ref5[1]
  print("Código de barras: ",num)
  if (int(num[6])==0):
    print("El producto es apto para reemplazo.")
  elif (int(num[6])>=1 and int(num[6])<=4):
    print("El producto debe ser reprocesado.")
  elif (int(num[6])>=5 and int(num[6])<=7):
    print("El producto debe ser ofertado.")
  elif (int(num[6])==8):
    print("El producto debe ser utilizado en pruebas químicas.")
  elif (int(num[6])==9):
    print("El producto debe ser deshechado.")
else:
  print("El producto aún no ha caducado.")
print("Calorías= ",int(ref5[2]))
print("Azúcares= ",int(ref5[3]))
if (int(ref5[2])>100):
  print("Etiqueta de exceso de calorías.")
if (int(ref5[3])>25):
  print("Etiqueta de exceso de azúcares.")

print("\n Refresco 6")
if (fecha>int(ref6[1])):
  print("El producto ha caducado.")
  num=ref6[1]
  print("Código de barras: ",num)
  if (int(num[6])==0):
    print("El producto es apto para reemplazo.")
  elif (int(num[6])>=1 and int(num[6])<=4):
    print("El producto debe ser reprocesado.")
  elif (int(num[6])>=5 and int(num[6])<=7):
    print("El producto debe ser ofertado.")
  elif (int(num[6])==8):
    print("El producto debe ser utilizado en pruebas químicas.")
  elif (int(num[6])==9):
    print("El producto debe ser deshechado.")
else:
  print("El producto aún no ha caducado.")
print("Calorías= ",int(ref6[2]))
print("Azúcares= ",int(ref6[3]))
if (int(ref6[2])>100):
  print("Etiqueta de exceso de calorías.")
if (int(ref6[3])>25):
  print("Etiqueta de exceso de azúcares.")

print("\n Refresco 7")
if (fecha>int(ref7[1])):
  print("El producto ha caducado.")
  num=ref7[1]
  print("Código de barras: ",num)
  if (int(num[6])==0):
    print("El producto es apto para reemplazo.")
  elif (int(num[6])>=1 and int(num[6])<=4):
    print("El producto debe ser reprocesado.")
  elif (int(num[6])>=5 and int(num[6])<=7):
    print("El producto debe ser ofertado.")
  elif (int(num[6])==8):
    print("El producto debe ser utilizado en pruebas químicas.")
  elif (int(num[6])==9):
    print("El producto debe ser deshechado.")
else:
  print("El producto aún no ha caducado.")
print("Calorías= ",int(ref7[2]))
print("Azúcares= ",int(ref7[3]))
if (int(ref7[2])>100):
  print("Etiqueta de exceso de calorías.")
if (int(ref7[3])>25):
  print("Etiqueta de exceso de azúcares.")

print("\n Refresco 8")
if (fecha>int(ref8[1])):
  print("El producto ha caducado.")
  num=ref8[1]
  print("Código de barras: ",num)
  if (int(num[6])==0):
    print("El producto es apto para reemplazo.")
  elif (int(num[6])>=1 and int(num[6])<=4):
    print("El producto debe ser reprocesado.")
  elif (int(num[6])>=5 and int(num[6])<=7):
    print("El producto debe ser ofertado.")
  elif (int(num[6])==8):
    print("El producto debe ser utilizado en pruebas químicas.")
  elif (int(num[6])==9):
    print("El producto debe ser deshechado.")
else:
  print("El producto aún no ha caducado.")
print("Calorías= ",int(ref8[2]))
print("Azúcares= ",int(ref8[3]))
if (int(ref8[2])>100):
  print("Etiqueta de exceso de calorías.")
if (int(ref8[3])>25):
  print("Etiqueta de exceso de azúcares.")

print("\n Refresco 9")
if (fecha>int(ref9[1])):
  print("El producto ha caducado.")
  num=ref9[1]
  print("Código de barras: ",num)
  if (int(num[6])==0):
    print("El producto es apto para reemplazo.")
  elif (int(num[6])>=1 and int(num[6])<=4):
    print("El producto debe ser reprocesado.")
  elif (int(num[6])>=5 and int(num[6])<=7):
    print("El producto debe ser ofertado.")
  elif (int(num[6])==8):
    print("El producto debe ser utilizado en pruebas químicas.")
  elif (int(num[6])==9):
    print("El producto debe ser deshechado.")
else:
  print("El producto aún no ha caducado.")
print("Calorías= ",int(ref9[2]))
print("Azúcares= ",int(ref9[3]))
if (int(ref9[2])>100):
  print("Etiqueta de exceso de calorías.")
if (int(ref9[3])>25):
  print("Etiqueta de exceso de azúcares.")

print("\n Refresco 10")
if (fecha>int(ref10[1])):
  print("El producto ha caducado.")
  num=ref10[1]
  print("Código de barras: ",num)
  if (int(num[6])==0):
    print("El producto es apto para reemplazo.")
  elif (int(num[6])>=1 and int(num[6])<=4):
    print("El producto debe ser reprocesado.")
  elif (int(num[6])>=5 and int(num[6])<=7):
    print("El producto debe ser ofertado.")
  elif (int(num[6])==8):
    print("El producto debe ser utilizado en pruebas químicas.")
  elif (int(num[6])==9):
    print("El producto debe ser deshechado.")
else:
  print("El producto aún no ha caducado.")
print("Calorías= ",int(ref10[2]))
print("Azúcares= ",int(ref10[3]))
if (int(ref10[2])>100):
  print("Etiqueta de exceso de calorías.")
if (int(ref10[3])>25):
  print("Etiqueta de exceso de azúcares.")

#3 txt. 1.-32 estados de la república. 2.-Algún atractivo turístico. 3.-Platillo distintivo del estado
#capitalize
contenido1=open('/content/Estados de la República.txt','r')
contenido2=open('/content/Lugares turísticos.txt','r')
contenido3=open('/content/Platillos.txt','r')
est=[]
lug=[]
pla=[]
conta=0
for linea in contenido1:
  conta=conta+1
  if (conta==32):
    est.insert(conta,linea)
  else:
    est.insert(conta,linea[:-1])
contenido1.close()

conta=0
for linea in contenido2:
  conta=conta+1
  if (conta==32):
    lug.insert(conta,linea)
  else:
    lug.insert(conta,linea[:-1])
contenido2.close()

conta=0
for linea in contenido3:
  conta=conta+1
  if (conta==32):
    pla.insert(conta,linea)
  else:
    pla.insert(conta,linea[:-1])
contenido3.close()

'''print(est)
print(lug)
print(pla)'''

edosylug=[]
for i in range (0,32,1):
  edosylug.insert(i,[est[i],lug[i]])
estadosylugares=dict(edosylug)

edosypla=[]
for i in range (0,32,1):
  edosypla.insert(i,[est[i],pla[i]])
estadosyplatillos=dict(edosypla)

print(estadosylugares)
print(estadosyplatillos)

#El ususario busca un estado
a=input("Escriba un estado de la república mexicana: ")
a=a.upper()
#print(a)
ac=a.capitalize()

for clave,valor in estadosylugares.items():
  if (a==clave):
    lugturic=valor

for clave,valor in estadosyplatillos.items():
  if (a==clave):
    platillo=valor

print("Es estado de ",ac," tiene como lugar turístico ",lugturic," y su platillo típico es ",platillo,".")

#Eliminar elementos
link=input("Escriba el link: ")
archivo=open(link,'r')

cont=0
#Obtenemos cada línea de txt en variables
for linea in archivo:
  cont=cont+1
archivo.close()

#Preparamos una lista para almacenar la información de nuestro txt
lista=[]
for i in range(cont):
  lista.insert(i,'a')

archivo=open(link,'r')
#Trnasferencia de datos txt a lista
i=0
for linea in archivo:
  lista[i]=linea
  i=i+1
archivo.close()

print(lista)

elem=input("Escriba el nombre del elemento que desea eliminar: ")
#Crear y descargar archivos de forma local
from google.colab import files
nom=input('Indique un nombre para su archivo: ')
nom=nom+'.txt'

#Analizaremos primero el último elemento de la lista
posicion=len(lista)-1

#Crear txt alojado desde la nube
with open(nom,'w') as f:

  #Comparación con elementos sin salto de línea
  if (elem==lista[posicion]):
    lista.remove(elemen)
    print("Se enocntró el elemento a eliminar.")
    posicion2=posicion-1
    lista[posicion2]=lista[posicion2][0:-1]
    print(lista)

  #Comparación con elementos con salto de línea
  for i in range(len(lista)):
    if (elem!=lista[i][0:-1]):
      f.write(lista[i])
    else:
      print("Se eliminará un elemento")
files.download(nom)

#Diccionario desde python clave=materias, valores=calificaciones (num entero)
#Guarde en un txt las reprobadas
materias={'Cálculo':0,'Álgebra':0,'Programación':0,'Física':0,'Biología':0,'Historia Universal':0,'Literatura':0,'Música':0,'Deportes':0}
for clave,valor in materias.items():
  print(clave)
  valor=int(input('Calificación: '))
  materias[clave]=valor
print(materias)

reprobadas={}

for clave,valor in materias.items():
  if (valor<6):
    reprobadas[clave]=valor
print(reprobadas)

contenido1=open('/content/Betty.txt','r')
song=[]
conta=0
for linea in contenido1:
  conta=conta+1
  if (conta==70):
    song.insert(conta,linea)
  else:
    song.insert(conta,linea[:-1])
contenido1.close()

print(song)

for i in range(0,70,1):
  if ("fuck" in song[i]):
    #print("Se encontró la palabra")
    s=song[i].replace('fuck','f**k')
    #print(s)
    song[i]=s

for i in range(0,70,1):
  if ("stupid" in song[i]):
    s=song[i].replace('stupid','s****d')
    song[i]=s

print("\n")
for i in range(0,70,1):
  print(song[i])

from google.colab import files

with open('Betty censored.txt','w') as f:
  for i in range(0,70,1):
    d1=song[i]+'\n'
    f.write(d1)
files.download('Betty censored.txt')

#Eliminar elementos
link=input("Escriba el link: ")
archivo=open(link,'r')

cont=0
#Obtenemos cada línea de txt en variables
for linea in archivo:
  cont=cont+1
archivo.close()

#Preparamos una lista para almacenar la información de nuestro txt
lista=[]
for i in range(cont):
  lista.insert(i,'a')

archivo=open(link,'r')
#Transferencia de datos txt a lista
i=0
for linea in archivo:
  lista[i]=linea
  i=i+1
archivo.close()

print(lista)

#Crear y descargar archivos de forma local
from google.colab import files
nom=input('Indique un nombre para su archivo: ')
nom=nom+'.txt'

#global elem
lista2=lista

def funcion(elem):
  #Analizaremos primero el último elemento de la lista
  posicion=len(lista)-1

  #Crear txt alojado desde la nube
  with open(nom,'w') as f:
    #Comparación con elementos sin salto de línea
    if (elem==lista[posicion]):
      lista.remove(elem)
      print("Se encontró el elemento a eliminar.")
      posicion2=posicion-1
      lista[posicion2]=lista[posicion2][0:-1]
      print(lista)

      #Comparación con elementos con salto de línea
    for i in range(len(lista)):
      if (elem!=lista[i][0:-1]):
        f.write(lista[i])
        lista2[i]=lista[i]
      else:
        print("Se eliminará un elemento")


n=int(input("¿Cuántos elementos desea eliminar?: "))
for i in range(0,n,1):
  elem=input("Escriba el nombre del elemento que desea eliminar: ")
  funcion(elem)
  print(lista2)
  print(lista)

files.download(nom)

#Eliminar elementos
link=input("Escriba el link: ")
archivo=open(link,'r')

cont=0
#Obtenemos cada línea de txt en variables
for linea in archivo:
  cont=cont+1
archivo.close()

#Preparamos una lista para almacenar la información de nuestro txt
lista=[]
for i in range(cont):
  lista.insert(i,'a')

archivo=open(link,'r')
#Transferencia de datos txt a lista
i=0
for linea in archivo:
  lista[i]=linea
  i=i+1
archivo.close()

#print(lista)
lista2=lista

for i in range (0,len(lista),1):
  if (i==len(lista)-1):
    lista2[i]=lista[i]
  else:
    lista2[i]=lista[i][0:-1]
#print(lista2)

n=int(input("¿Cuántos elementos desea eliminar?: "))
for i in range(0,n,1):
  elem=input("Escriba el nombre del elemento que desea eliminar: ")
  if elem in lista2:
    lista.remove(elem)
#print(lista2)

from google.colab import files

with open('Paises sólo de Europa.txt','w') as f:
  for i in lista2:
    d1=i+'\n'
    f.write(d1)
files.download('Paises sólo de Europa.txt')

#Condiciones: Si la compra es >= $1000 se hace una devolución del 20%, si num de elem <=15 se le asigna a una caja rápida, a toda la compra se le debe calcular el IVA
#En la compra de >= $1800 se le genra un código para rifa de un auto y se agrega a su ticket, adicionalmente se le pregunta si desea redondear sus centavos
#Está conforme o desea retirar algún producto?

n=int(input("Buen día, por favor escriba el total de productos que desea comprar:"))

if (n<=15):
  print("Se le asignará una caja rápida")
else:
  print("Favor de pasar a una caja normal")

produc=[]
precios=[]
ptotal=0
ban=0

for i in range (0,n,1):
  produc.append(i)
  precios.append(i)

for i in range (0,n,1):
  produc[i]=input("Producto: ")
  precios[i]=float(input("Precio: "))
  ptotal=ptotal+precios[i]

redo=int(input("¿Desea redondear sus centavos? 1.-SI 2.-NO "))
if (redo==1):
  import math
  ptotal2=math.ceil(ptotal)
else:
  ptotal2=ptotal

print("\n\n")
print("----- TICKET DE COMPRA -----")
print("PRODUCTOS: -----------------")
for i in range (0,n,1):
  print(produc[i]," -------- $",precios[i])
print("SUBTOTAL ----------------- $",ptotal2)

if (ptotal>=1000):
  if (ptotal>=1800):
    ban=1
  print("DESCUENTO -------- $",ptotal2*0.2)
  ptotal=0.8*ptotal2
  print("----------------------------")
  print("IVA ----------------- $",ptotal2*0.16)
  print("TOTAL ----------------- $",ptotal2)
else:
  print("IVA ----------------- $",ptotal2*0.16)
  print("TOTAL ----------------- $",ptotal2)

if (ban==1):
  print("****************************")
  print("¡Felicidades! Ya tiene su boleto")
  print("para la rifa de un auto")
  print("CÓDIGO: 13121989")

#Condiciones: Si la compra es >= $1000 se hace una devolución del 20%, si num de elem <=15 se le asigna a una caja rápida, a toda la compra se le debe calcular el IVA
#En la compra de >= $1800 se le genra un código para rifa de un auto y se agrega a su ticket, adicionalmente se le pregunta si desea redondear sus centavos
#Está conforme o desea retirar algún producto?

n=int(input("Buen día, por favor escriba el total de productos que desea comprar:"))

if (n<=15):
  print("Se le asignará una caja rápida")
else:
  print("Favor de pasar a una caja normal")

produc=[]
precios=[]

for i in range (0,n,1):
  produc.append(i)
  precios.append(i)

for i in range (0,n,1):
  produc[i]=input("Producto: ")
  precios[i]=float(input("Precio: "))

def calcula():

  global ban
  ban=0
  global ptotal
  ptotal=0

  for i in range (0,n,1):
    ptotal=ptotal+precios[i]

  redo=int(input("¿Desea redondear sus centavos? 1.-SI 2.-NO "))
  if (redo==1):
    import math
    ptotal2=math.ceil(ptotal)
  else:
    ptotal2=ptotal

  print("\n\n")
  print("----- TICKET DE COMPRA -----")
  print("PRODUCTOS: -----------------")
  for i in range (0,n,1):
    print(produc[i]," -------- $",precios[i])
  print("SUBTOTAL ----------------- $",ptotal2)

  if (ptotal>=1000):
    if (ptotal>=1800):
      ban=1
    print("DESCUENTO -------- $",ptotal2*0.2)
    ptotal=0.8*ptotal2
    print("----------------------------")
    print("IVA ----------------- $",ptotal2*0.16)
    print("TOTAL ----------------- $",ptotal2)
  else:
    print("IVA ----------------- $",ptotal2*0.16)
    print("TOTAL ----------------- $",ptotal2)

  if (ban==1):
    print("****************************")
    print("¡Felicidades! Ya tiene su boleto")
    print("para la rifa de un auto")
    print("CÓDIGO: 13121989")

calcula()

print("\n\n")
print("¿Su ticket de compra es correcto? O desea eliminar algún producto")
des1=int(input("1.-Mi ticket es correcto. 2.-Eliminar productos."))

if (des1==2):
  j=int(input("Escriba el número de produtos que desea eliminar: "))
  n=n-j
  for i in range (0,j,1):
    elim=input("Escriba el nombre del producto que desea eliminar: ")
    for i in range (0,n,1):
      if (elim==produc[i]):
        produc.pop(i)
        precios.pop(i)
  calcula()
else:
  print("Gracias por su preferencia.")

ptotal=12.3584
ptotal2=0
redo=int(input("¿Desea redondear sus centavos? 1.-SI 2.-NO "))
if (redo==1):
  import math
  ptotal2=round(ptotal,0)
print(ptotal2)

ptotal=12.3584
ptotal2=0
redo=int(input("¿Desea redondear sus centavos? 1.-SI 2.-NO "))
if (redo==1):
  import math
  ptotal2=math.ceil(ptotal)
print(ptotal2)

#Funciones: Crear un txt, leer, actualizar, eliminar elementos o eliminar el txt por completo.

de1=int(input("¿Desea trabajar con un txt nuevo o uno existente? 1.-Nuevo 2.-Existente "))
if (de1==1):
  print("ARCHIVO NUEVO")

  n=int(input("Total de renglones: "))
  lista=[]
  for i in range(0,n,1):
    lista.append(i)

  for i in range(0,n,1):
    renglon=input("Renglón: ")
    lista[i]=renglon
  print(lista)

  from google.colab import files
  nom=input('Indique un nombre para su archivo: ')
  nom=nom+'.txt'
  with open(nom,'w') as f:
    for i in range (0,n,1):
      r=lista[i]+'\n'
      f.write(r)
  files.download(nom)

else:
  print("ARCHIVO EXISTENTE")
  print("Antes de comenzar, asegurese de que el archivo que desea modificar se encuentre cargado en Colab")
  print("\n")
  link=input("Escriba el link: ")
  archivo=open(link,'r')

  #Contamos el total de renglones en el txt
  cont=0
  for linea in archivo:
    cont=cont+1
  archivo.close()

  #Preparamos una lista para almacenar la información de nuestro txt
  lista=[]
  for i in range(cont):
    lista.insert(i,'a')

  #Transferencia de datos txt a lista
  archivo=open(link,'r')
  i=0
  for linea in archivo:
    lista[i]=linea
    i=i+1
  archivo.close()

  lista2=lista
  
  for i in range (0,len(lista),1):
    if (i==len(lista)-1):
      lista2[i]=lista[i]
    else:
      lista2[i]=lista[i][0:-1]
  
  print(lista2)
  lista3=lista2
  
  for i in range (0,len(lista),1):
    lista3[i]=lista3[i].upper()

  print(lista3)

#Usuario decide entre agregar, eliminar o modificar renglones o eliminar el documento txt
  de2=int(input("Opción que desea realizar: \n1.-Agregar renglones \n2.-Eliminar renglones \n3.-Modificar el contenido de renglones existentes \n4.-Eliminar el txt.\n"))
  if (de2==1):
    de3=int(input("1.-Agregar renglones al principio \n2.-Agregar renglones en una posición en específico. \n3.-Agregar renglones al final.\n"))
    if (de3==1):
      print("1.-Agregar renglones al principio")
      n=int(input("Total de renglones que desea agregar "))
      extra=[]
      for i in range(n):
        extra.insert(i,'a')

      for i in range (0,n,1):
        extra[i]=input("Renglon: ")

      total=len(lista2)+len(extra)
      listaf=[]
      for i in range(total):
        listaf.insert(i,'a')

      listaf=extra+lista2
      print(listaf)
      from google.colab import files
      nom=input('Indique un nombre para su archivo: ')
      nom=nom+'.txt'
      with open(nom,'w') as f:
        for i in range (0,total,1):
          r=listaf[i]+'\n'
          f.write(r)
      files.download(nom)

    if (de3==2):
      print("2.-Agregar renglones en una posición en específico.")
      n=int(input("Total de renglones que desea agregar "))

      for i in range(0,n,1):
        extra=input("Renglón: ")
        pos=int(input("Posición: "))
        lista2.insert(pos-1,extra)
      print(lista2)

      from google.colab import files
      nom=input('Indique un nombre para su archivo: ')
      nom=nom+'.txt'
      with open(nom,'w') as f:
        for i in range (0,len(lista2),1):
          r=lista2[i]+'\n'
          f.write(r)
      files.download(nom)

    if (de3==3):
      print("1.-Agregar renglones al final")
      n=int(input("Total de renglones que desea agregar "))
      extra=[]
      for i in range(n):
        extra.insert(i,'a')

      for i in range (0,n,1):
        extra[i]=input("Renglon: ")

      total=len(lista2)+len(extra)
      listaf=[]
      for i in range(total):
        listaf.insert(i,'a')

      listaf=lista2+extra
      print(listaf)
      from google.colab import files
      nom=input('Indique un nombre para su archivo: ')
      nom=nom+'.txt'
      with open(nom,'w') as f:
        for i in range (0,total,1):
          r=listaf[i]+'\n'
          f.write(r)
      files.download(nom)
  if (de2==2):
    print("2.-Eliminar renglones")
    n=int(input("Total de renglones que desea eliminar: "))
    lista3=[]
    for i in range(cont):
      lista3.insert(i,'a')

    for i in range (0,n,1):
      elim=int(input("Número de renglón: "))
      elim=elim-i
      lista2.pop(elim-1)
    print(lista2)

    from google.colab import files
    nom=input('Indique un nombre para su archivo: ')
    nom=nom+'.txt'
    with open(nom,'w') as f:
      for i in range (0,cont-n,1):
        r=lista2[i]+'\n'
        f.write(r)
    files.download(nom)

  if (de2==3):
    print("3.-Modificar el contenido de renglones existentes")
    n=int(input("Total de renglones que desea modificar: "))
    for i in range (0,n,1):
      mod=input("Contenido del renglón: ")
      mod=mod.upper()
      j=0
      for a in lista3:
        if (a==mod):
          lista3[j]=input("Nuevo contenido del renglón: ")
        j=j+1
    print(lista2)
    from google.colab import files
    nom=input('Indique un nombre para su archivo: ')
    nom=nom+'.txt'
    with open(nom,'w') as f:
      for i in range (0,cont,1):
        r=lista2[i]+'\n'
        f.write(r)
    files.download(nom)

  if (de2==4):
    print("4.-Eliminar el txt")
    lista2.clear()
    from google.colab import files
    nom=input('Indique un nombre para su archivo: ')
    nom=nom+'.txt'
    with open(nom,'w') as f:
      for i in range (0,len(lista2),1):
        r=lista2[i]+'\n'
        f.write(r)
    files.download(nom)

  de4=int(input("¿Desea crear una copia del documento? 1.-SI, 2.-NO : "))
  if(de4==1):
    from google.colab import files
    nom2=input('Indique un nombre para la copia: ')
    nom2=nom2+'.txt'
    with open(nom2,'w') as f:
      for i in range (0,len(lista2),1):
        r=lista2[i]+'\n'
        f.write(r)
    files.download(nom2)

#Funciones: Crear un txt, leer, actualizar, eliminar elementos o eliminar el txt por completo.

de1=int(input("¿Desea trabajar con un txt nuevo o uno existente? 1.-Nuevo 2.-Existente "))
if (de1==1):
  print("ARCHIVO NUEVO")

  n=int(input("Total de renglones: "))
  lista=[]
  for i in range(0,n,1):
    lista.append(i)

  for i in range(0,n,1):
    renglon=input("Renglón: ")
    lista[i]=renglon
  print(lista)

  from google.colab import files
  nom=input('Indique un nombre para su archivo: ')
  nom=nom+'.txt'
  with open(nom,'w') as f:
    for i in range (0,n,1):
      r=lista[i]+'\n'
      f.write(r)
  files.download(nom)

else:
  print("ARCHIVO EXISTENTE")
  print("Antes de comenzar, asegurese de que el archivo que desea modificar se encuentre cargado en Colab")
  print("\n")
  link=input("Escriba el link: ")
  archivo=open(link,'r')

  #Contamos el total de renglones en el txt
  cont=0
  for linea in archivo:
    cont=cont+1
  archivo.close()

  #Preparamos una lista para almacenar la información de nuestro txt
  lista=[]
  for i in range(cont):
    lista.insert(i,'a')

  #Transferencia de datos txt a lista
  archivo=open(link,'r')
  i=0
  for linea in archivo:
    lista[i]=linea
    i=i+1
  archivo.close()

  lista2=lista
  
  for i in range (0,len(lista),1):
    if (i==len(lista)-1):
      lista2[i]=lista[i]
    else:
      lista2[i]=lista[i][0:-1]
  
  print(lista2)
  lista3=lista2
  
  for i in range (0,len(lista),1):
    lista3[i]=lista3[i].upper()

  print(lista3)

#Usuario decide entre agregar, eliminar o modificar renglones o eliminar el documento txt
  de2=int(input("Opción que desea realizar: \n1.-Agregar renglones \n2.-Eliminar renglones \n3.-Modificar el contenido de renglones existentes \n4.-Eliminar el txt.\n"))
  if (de2==1):
    de3=int(input("1.-Agregar renglones al principio \n2.-Agregar renglones en una posición en específico. \n3.-Agregar renglones al final.\n"))
    if (de3==1):
      print("1.-Agregar renglones al principio")
      n=int(input("Total de renglones que desea agregar "))
      extra=[]
      for i in range(n):
        extra.insert(i,'a')

      for i in range (0,n,1):
        extra[i]=input("Renglon: ")

      total=len(lista2)+len(extra)
      listaf=[]
      for i in range(total):
        listaf.insert(i,'a')

      listaf=extra+lista2
      print(listaf)
      from google.colab import files
      nom=input('Indique un nombre para su archivo: ')
      nom=nom+'.txt'
      with open(nom,'w') as f:
        for i in range (0,total,1):
          r=listaf[i]+'\n'
          f.write(r)
      files.download(nom)

    if (de3==2):
      print("2.-Agregar renglones en una posición en específico.")
      n=int(input("Total de renglones que desea agregar "))

      for i in range(0,n,1):
        extra=input("Renglón: ")
        pos=int(input("Posición: "))
        lista2.insert(pos-1,extra)
      print(lista2)

      from google.colab import files
      nom=input('Indique un nombre para su archivo: ')
      nom=nom+'.txt'
      with open(nom,'w') as f:
        for i in range (0,len(lista2),1):
          r=lista2[i]+'\n'
          f.write(r)
      files.download(nom)

    if (de3==3):
      print("1.-Agregar renglones al final")
      n=int(input("Total de renglones que desea agregar "))
      extra=[]
      for i in range(n):
        extra.insert(i,'a')

      for i in range (0,n,1):
        extra[i]=input("Renglon: ")

      total=len(lista2)+len(extra)
      listaf=[]
      for i in range(total):
        listaf.insert(i,'a')

      listaf=lista2+extra
      print(listaf)
      from google.colab import files
      nom=input('Indique un nombre para su archivo: ')
      nom=nom+'.txt'
      with open(nom,'w') as f:
        for i in range (0,total,1):
          r=listaf[i]+'\n'
          f.write(r)
      files.download(nom)
  if (de2==2):
    print("2.-Eliminar renglones")
    de9=int(input("Desea eliminar indicando su: 1.-Posición 2.-Contenido : "))
    n=int(input("Total de renglones que desea eliminar: "))
    if (de9==1):
      lista3=[]
      for i in range(cont):
        lista3.insert(i,'a')

      for i in range (0,n,1):
        elim=int(input("Número de renglón: "))
        elim=elim-i
        lista2.pop(elim-1)
      print(lista2)

    else:
      for i in range (0,n,1):
        mod=input("Contenido del renglón: ")
        mod=mod.upper()
        m=0
        k=0
        for a in lista3:
          if (a==mod):
            #print(a)
            #print(m)
            lista3.pop(m-k)
            k=k+1
          m=m+1
      print(lista2)

    from google.colab import files
    nom=input('Indique un nombre para su archivo: ')
    nom=nom+'.txt'
    with open(nom,'w') as f:
      for i in range (0,cont-n,1):
        r=lista2[i]+'\n'
        f.write(r)
    files.download(nom)

  if (de2==3):
    print("3.-Modificar el contenido de renglones existentes")
    n=int(input("Total de renglones que desea modificar: "))
    for i in range (0,n,1):
      mod=input("Contenido del renglón: ")
      mod=mod.upper()
      j=0
      for a in lista3:
        if (a==mod):
          lista3[j]=input("Nuevo contenido del renglón: ")
        j=j+1
    print(lista2)
    from google.colab import files
    nom=input('Indique un nombre para su archivo: ')
    nom=nom+'.txt'
    with open(nom,'w') as f:
      for i in range (0,cont,1):
        r=lista2[i]+'\n'
        f.write(r)
    files.download(nom)

  if (de2==4):
    print("4.-Eliminar el txt")
    lista2.clear()
    from google.colab import files
    nom=input('Indique un nombre para su archivo: ')
    nom=nom+'.txt'
    with open(nom,'w') as f:
      for i in range (0,len(lista2),1):
        r=lista2[i]+'\n'
        f.write(r)
    files.download(nom)

  de4=int(input("¿Desea crear una copia del documento? 1.-SI, 2.-NO : "))
  if(de4==1):
    from google.colab import files
    nom2=input('Indique un nombre para la copia: ')
    nom2=nom2+'.txt'
    with open(nom2,'w') as f:
      for i in range (0,len(lista2),1):
        r=lista2[i]+'\n'
        f.write(r)
    files.download(nom2)

#Funciones: Crear un txt, leer, actualizar, eliminar elementos o eliminar el txt por completo.

password='física123'
de1=int(input("¿Desea trabajar con un txt nuevo o uno existente? 1.-Nuevo 2.-Existente "))
if (de1==1):
  print("ARCHIVO NUEVO")

  n=int(input("Total de renglones: "))
  lista=[]
  for i in range(0,n,1):
    lista.append(i)

  for i in range(0,n,1):
    renglon=input("Renglón: ")
    lista[i]=renglon
  print(lista)

  con=input("Escriba la contraseña: ")

  from google.colab import files
  nom=input('Indique un nombre para su archivo: ')
  nom=nom+'.txt'
  if (con==password):
    with open(nom,'w') as f:
      for i in range (0,n,1):
        if (i==n-1):
          r=lista[i]
        else:
          r=lista[i]+'\n'
        f.write(r)
      files.download(nom)

    de4=int(input("¿Desea crear una copia del documento? 1.-SI, 2.-NO : "))
    if(de4==1):
      from google.colab import files
      nom2=input('Indique un nombre para la copia: ')
      nom2=nom2+'.txt'
      with open(nom2,'w') as f:
        for i in range (0,len(lista),1):
          if (i==len(lista)-1):
            r=lista[i]
          else:
            r=lista[i]+'\n'
          f.write(r)
      files.download(nom2)

  else:
    lista.clear()
    with open(nom,'w') as f:
      for i in range (0,len(lista),1):
        r=lista[i]+'\n'
        f.write(r)
      files.download(nom)

else:
  print("ARCHIVO EXISTENTE")
  print("Antes de comenzar, asegurese de que el archivo que desea modificar se encuentre cargado en Colab")
  print("\n")
  link=input("Escriba el link: ")
  archivo=open(link,'r')
  con=input("Escriba la contraseña: ")

  #Contamos el total de renglones en el txt
  cont=0
  for linea in archivo:
    cont=cont+1
  archivo.close()

  #Preparamos una lista para almacenar la información de nuestro txt
  lista=[]
  for i in range(cont):
    lista.insert(i,'a')

  #Transferencia de datos txt a lista
  archivo=open(link,'r')
  i=0
  for linea in archivo:
    lista[i]=linea
    i=i+1
  archivo.close()

  lista2=lista
  
  for i in range (0,len(lista),1):
    if (i==len(lista)-1):
      lista2[i]=lista[i]
    else:
      lista2[i]=lista[i][0:-1]
  
  print(lista2)
  lista3=lista2
  
  for i in range (0,len(lista),1):
    lista3[i]=lista3[i].upper()

  print(lista3)

#Usuario decide entre agregar, eliminar o modificar renglones o eliminar el documento txt
  de2=int(input("Opción que desea realizar: \n1.-Agregar renglones \n2.-Eliminar renglones \n3.-Modificar el contenido de renglones existentes \n4.-Eliminar el txt.\n"))
  if (de2==1):
    de3=int(input("1.-Agregar renglones al principio \n2.-Agregar renglones en una posición en específico. \n3.-Agregar renglones al final.\n"))
    if (de3==1):
      print("1.-Agregar renglones al principio")
      n=int(input("Total de renglones que desea agregar "))
      extra=[]
      for i in range(n):
        extra.insert(i,'a')

      for i in range (0,n,1):
        extra[i]=input("Renglon: ")

      total=len(lista2)+len(extra)
      listaf=[]
      for i in range(total):
        listaf.insert(i,'a')

      listaf=extra+lista2
      print(listaf)
      from google.colab import files
      nom=input('Indique un nombre para su archivo: ')
      nom=nom+'.txt'
      if (con==password):
        with open(nom,'w') as f:
          for i in range (0,total,1):
            if (i==total-1):
              r=listaf[i]
            else:
              r=listaf[i]+'\n'
            f.write(r)
        files.download(nom)
      else:
        listaf.clear()
        with open(nom,'w') as f:
          for i in range (0,len(listaf),1):
            r=listaf[i]+'\n'
            f.write(r)
          files.download(nom)

    if (de3==2):
      print("2.-Agregar renglones en una posición en específico.")
      n=int(input("Total de renglones que desea agregar "))

      for i in range(0,n,1):
        extra=input("Renglón: ")
        pos=int(input("Posición: "))
        lista2.insert(pos-1,extra)
      print(lista2)

      from google.colab import files
      nom=input('Indique un nombre para su archivo: ')
      nom=nom+'.txt'
      if (con==password):
        with open(nom,'w') as f:
          for i in range (0,len(lista2),1):
            if (i==len(lista2)-1):
              r=lista2[i]
            else:
              r=lista2[i]+'\n'
            f.write(r)
        files.download(nom)
      else:
        lista2.clear()
        with open(nom,'w') as f:
          for i in range (0,len(lista2),1):
            r=lista2[i]+'\n'
            f.write(r)
          files.download(nom)

    if (de3==3):
      print("1.-Agregar renglones al final")
      n=int(input("Total de renglones que desea agregar "))
      extra=[]
      for i in range(n):
        extra.insert(i,'a')

      for i in range (0,n,1):
        extra[i]=input("Renglon: ")

      total=len(lista2)+len(extra)
      listaf=[]
      for i in range(total):
        listaf.insert(i,'a')

      listaf=lista2+extra
      print(listaf)
      from google.colab import files
      nom=input('Indique un nombre para su archivo: ')
      nom=nom+'.txt'
      if (con==password):
        with open(nom,'w') as f:
          for i in range (0,total,1):
            r=listaf[i]+'\n'
            f.write(r)
        files.download(nom)
      else:
        listaf.clear()
        with open(nom,'w') as f:
          for i in range (0,len(listaf),1):
            r=listaf[i]+'\n'
            f.write(r)
          files.download(nom)

  if (de2==2):
    print("2.-Eliminar renglones")
    de9=int(input("Desea eliminar indicando su: 1.-Posición 2.-Contenido : "))
    n=int(input("Total de renglones que desea eliminar: "))
    if (de9==1):
      lista3=[]
      for i in range(cont):
        lista3.insert(i,'a')

      for i in range (0,n,1):
        elim=int(input("Número de renglón: "))
        elim=elim-i
        lista2.pop(elim-1)
      print(lista2)

    else:
      for i in range (0,n,1):
        mod=input("Contenido del renglón: ")
        mod=mod.upper()
        m=0
        k=0
        for a in lista3:
          if (a==mod):
            #print(a)
            #print(m)
            lista3.pop(m-k)
            k=k+1
          m=m+1
      print(lista2)

    from google.colab import files
    nom=input('Indique un nombre para su archivo: ')
    nom=nom+'.txt'
    if (con==password):
      with open(nom,'w') as f:
        for i in range (0,cont-n,1):
          if (i==cont-n-1):
            r=lista2[i]
          else:
            r=lista2[i]+'\n'
          f.write(r)
      files.download(nom)
    else:
        lista2.clear()
        with open(nom,'w') as f:
          for i in range (0,len(lista2),1):
            r=lista2[i]+'\n'
            f.write(r)
          files.download(nom)

  if (de2==3):
    print("3.-Modificar el contenido de renglones existentes")
    de9=int(input("Desea modificar renglones indicando su: 1.-Posición 2.-Contenido : "))
    n=int(input("Total de renglones que desea modificar: "))
    if (de9==2):
      for i in range (0,n,1):
        mod=input("Contenido del renglón: ")
        mod=mod.upper()
        j=0
        for a in lista3:
          if (a==mod):
            lista3[j]=input("Nuevo contenido del renglón: ")
          j=j+1
      print(lista2)
    else:
      for i in range (0,n,1):
        n1=int(input("Número de renglón: "))
        for k in range (0,len(lista2),1):
          if (n1==k):
            lista2[k-1]=input("Nuevo contenido del renglón: ")
      print(lista2)

    from google.colab import files
    nom=input('Indique un nombre para su archivo: ')
    nom=nom+'.txt'
    if (con==password):
      with open(nom,'w') as f:
        for i in range (0,cont,1):
          if (i==cont-1):
            r=lista2[i]
          else:
            r=lista2[i]+'\n'
          f.write(r)
      files.download(nom)
    else:
        lista2.clear()
        with open(nom,'w') as f:
          for i in range (0,len(lista2),1):
            r=lista2[i]+'\n'
            f.write(r)
          files.download(nom)

  if (de2==4):
    print("4.-Eliminar el txt")
    lista2.clear()
    from google.colab import files
    nom=input('Indique un nombre para su archivo: ')
    nom=nom+'.txt'
    if (con==password):
      with open(nom,'w') as f:
        for i in range (0,len(lista2),1):
          if (i==len(lista2)-1):
            r=lista2[i]
          else:
            r=lista2[i]+'\n'
          f.write(r)
      files.download(nom)
    else:
        lista2.clear()
        with open(nom,'w') as f:
          for i in range (0,len(lista2),1):
            r=lista2[i]+'\n'
            f.write(r)
          files.download(nom)

  de4=int(input("¿Desea crear una copia del documento? 1.-SI, 2.-NO : "))
  if(de4==1):
    from google.colab import files
    nom2=input('Indique un nombre para la copia: ')
    nom2=nom2+'.txt'
    with open(nom2,'w') as f:
      for i in range (0,len(lista2),1):
        if (i==len(lista2)-1):
          r=lista2[i]
        else:
          r=lista2[i]+'\n'
        f.write(r)
    files.download(nom2)

"""# Nueva sección"""